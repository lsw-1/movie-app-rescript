// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as FeedScreen from "./FeedScreen.bs.js";
import * as LoginScreen from "./LoginScreen.bs.js";
import * as RootContext from "./RootContext.bs.js";
import * as Native from "@react-navigation/native";
import * as BottomTabs$ReactNavigation from "rescript-react-navigation/src/BottomTabs.bs.js";
import * as NativeStack$ReactNavigation from "rescript-react-navigation/src/NativeStack.bs.js";

var M = {};

var include = BottomTabs$ReactNavigation.Make(M);

var $$Screen = include.$$Screen;

var $$Navigator = include.$$Navigator;

function RootNavigation$Tabs(Props) {
  return React.createElement($$Navigator.make, {
              initialRouteName: "feed",
              children: null
            }, React.createElement($$Screen.make, {
                  name: "home",
                  component: FeedScreen.make
                }), React.createElement($$Screen.make, {
                  name: "friends",
                  component: LoginScreen.make
                }), React.createElement($$Screen.make, {
                  name: "settings",
                  component: LoginScreen.make
                }));
}

var Tabs_Navigation = include.Navigation;

var Tabs_bottomTabs = include.bottomTabs;

var Tabs_ScreenWithCallback = include.ScreenWithCallback;

var Tabs = {
  Navigation: Tabs_Navigation,
  bottomTabs: Tabs_bottomTabs,
  $$Screen: $$Screen,
  ScreenWithCallback: Tabs_ScreenWithCallback,
  $$Navigator: $$Navigator,
  make: RootNavigation$Tabs
};

var include$1 = NativeStack$ReactNavigation.Make(M);

var $$Screen$1 = include$1.$$Screen;

var $$Navigator$1 = include$1.$$Navigator;

function RootNavigation$UnAuth(Props) {
  return React.createElement($$Navigator$1.make, {
              initialRouteName: "unauthorized",
              children: React.createElement($$Screen$1.make, {
                    name: "unauthorized",
                    options: (function (props) {
                        return {
                                headerShown: false
                              };
                      }),
                    component: LoginScreen.make
                  })
            });
}

var UnAuth_Navigation = include$1.Navigation;

var UnAuth_stack = include$1.stack;

var UnAuth_ScreenWithCallback = include$1.ScreenWithCallback;

var UnAuth = {
  Navigation: UnAuth_Navigation,
  stack: UnAuth_stack,
  ScreenWithCallback: UnAuth_ScreenWithCallback,
  $$Screen: $$Screen$1,
  $$Navigator: $$Navigator$1,
  make: RootNavigation$UnAuth
};

function RootNavigation(Props) {
  var match = React.useContext(RootContext.context);
  return React.createElement(Native.NavigationContainer, {
              children: match[0].authorized ? React.createElement(RootNavigation$Tabs, {}) : React.createElement(RootNavigation$UnAuth, {})
            });
}

var make = RootNavigation;

export {
  M ,
  Tabs ,
  UnAuth ,
  make ,
  
}
/* include Not a pure module */
